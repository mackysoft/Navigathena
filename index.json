{
  "api/MackySoft.Navigathena.AsyncOperation.html": {
    "href": "api/MackySoft.Navigathena.AsyncOperation.html",
    "title": "Class AsyncOperation | Navigathena",
    "keywords": "Class AsyncOperation Inheritance Object AsyncOperation Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public static class AsyncOperation Methods Combine(IAsyncOperation, IAsyncOperation) Declaration public static IAsyncOperation Combine(IAsyncOperation operation1, IAsyncOperation operation2) Parameters Type Name Description IAsyncOperation operation1 IAsyncOperation operation2 Returns Type Description IAsyncOperation Combine(IAsyncOperation, IAsyncOperation, IAsyncOperation) Declaration public static IAsyncOperation Combine(IAsyncOperation operation1, IAsyncOperation operation2, IAsyncOperation operation3) Parameters Type Name Description IAsyncOperation operation1 IAsyncOperation operation2 IAsyncOperation operation3 Returns Type Description IAsyncOperation Combine(IAsyncOperation, IAsyncOperation, IAsyncOperation, IAsyncOperation) Declaration public static IAsyncOperation Combine(IAsyncOperation operation1, IAsyncOperation operation2, IAsyncOperation operation3, IAsyncOperation operation4) Parameters Type Name Description IAsyncOperation operation1 IAsyncOperation operation2 IAsyncOperation operation3 IAsyncOperation operation4 Returns Type Description IAsyncOperation Combine(IAsyncOperation[]) Declaration public static IAsyncOperation Combine(params IAsyncOperation[] operations) Parameters Type Name Description IAsyncOperation [] operations Returns Type Description IAsyncOperation Combine(IEnumerable<IAsyncOperation>) Declaration public static IAsyncOperation Combine(IEnumerable<IAsyncOperation> operations) Parameters Type Name Description IEnumerable < IAsyncOperation > operations Returns Type Description IAsyncOperation Create(Func<IProgress<IProgressDataStore>, CancellationToken, UniTask>) Declaration public static IAsyncOperation Create(Func<IProgress<IProgressDataStore>, CancellationToken, UniTask> executeAsync) Parameters Type Name Description Func < IProgress < IProgressDataStore >, CancellationToken , UniTask > executeAsync Returns Type Description IAsyncOperation Empty() Declaration public static IAsyncOperation Empty() Returns Type Description IAsyncOperation"
  },
  "api/MackySoft.Navigathena.Diagnostics.html": {
    "href": "api/MackySoft.Navigathena.Diagnostics.html",
    "title": "Namespace MackySoft.Navigathena.Diagnostics | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena.Diagnostics Classes LogHandler NavigathenaDebug Enums LogLevel"
  },
  "api/MackySoft.Navigathena.Diagnostics.LogHandler.html": {
    "href": "api/MackySoft.Navigathena.Diagnostics.LogHandler.html",
    "title": "Class LogHandler | Navigathena",
    "keywords": "Class LogHandler Inheritance Object LogHandler Namespace : MackySoft.Navigathena.Diagnostics Assembly : cs.temp.dll.dll Syntax public sealed class LogHandler : ILogHandler Properties LogLevel Declaration public LogLevel LogLevel { get; set; } Property Value Type Description LogLevel Methods LogException(Exception, UnityObject) Declaration public void LogException(Exception exception, UnityObject context) Parameters Type Name Description Exception exception UnityObject context LogFormat(LogType, UnityObject, String, Object[]) Declaration public void LogFormat(LogType logType, UnityObject context, string format, params object[] args) Parameters Type Name Description LogType logType UnityObject context String format Object [] args"
  },
  "api/MackySoft.Navigathena.Diagnostics.LogLevel.html": {
    "href": "api/MackySoft.Navigathena.Diagnostics.LogLevel.html",
    "title": "Enum LogLevel | Navigathena",
    "keywords": "Enum LogLevel Namespace : MackySoft.Navigathena.Diagnostics Assembly : cs.temp.dll.dll Syntax [Flags] public enum LogLevel Fields Name Description All Error Info None Warning"
  },
  "api/MackySoft.Navigathena.Diagnostics.NavigathenaDebug.html": {
    "href": "api/MackySoft.Navigathena.Diagnostics.NavigathenaDebug.html",
    "title": "Class NavigathenaDebug | Navigathena",
    "keywords": "Class NavigathenaDebug Inheritance Object NavigathenaDebug Namespace : MackySoft.Navigathena.Diagnostics Assembly : cs.temp.dll.dll Syntax public static class NavigathenaDebug Properties Logger Declaration public static ILogger Logger { get; } Property Value Type Description ILogger LogLevel Declaration public static LogLevel LogLevel { get; set; } Property Value Type Description LogLevel"
  },
  "api/MackySoft.Navigathena.html": {
    "href": "api/MackySoft.Navigathena.html",
    "title": "Namespace MackySoft.Navigathena | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena Classes AsyncOperation ProcessCounter ProgressDataStore ProgressDataStore<T> Structs ProcessCounter.ProcessScope Interfaces IAsyncOperation IProgressDataStore IProgressDataStore<T>"
  },
  "api/MackySoft.Navigathena.IAsyncOperation.html": {
    "href": "api/MackySoft.Navigathena.IAsyncOperation.html",
    "title": "Interface IAsyncOperation | Navigathena",
    "keywords": "Interface IAsyncOperation Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public interface IAsyncOperation Methods ExecuteAsync(IProgress<IProgressDataStore>, CancellationToken) Declaration UniTask ExecuteAsync(IProgress<IProgressDataStore> progress = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.IProgressDataStore.html": {
    "href": "api/MackySoft.Navigathena.IProgressDataStore.html",
    "title": "Interface IProgressDataStore | Navigathena",
    "keywords": "Interface IProgressDataStore Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public interface IProgressDataStore Methods GetDataNonGeneric() Declaration object GetDataNonGeneric() Returns Type Description Object"
  },
  "api/MackySoft.Navigathena.IProgressDataStore-1.html": {
    "href": "api/MackySoft.Navigathena.IProgressDataStore-1.html",
    "title": "Interface IProgressDataStore<T> | Navigathena",
    "keywords": "Interface IProgressDataStore<T> Inherited Members IProgressDataStore.GetDataNonGeneric() Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public interface IProgressDataStore<T> : IProgressDataStore Type Parameters Name Description T Methods GetData() Declaration T GetData() Returns Type Description T SetData(T) Declaration IProgressDataStore<T> SetData(T data) Parameters Type Name Description T data Returns Type Description IProgressDataStore <T>"
  },
  "api/MackySoft.Navigathena.ProcessCounter.html": {
    "href": "api/MackySoft.Navigathena.ProcessCounter.html",
    "title": "Class ProcessCounter | Navigathena",
    "keywords": "Class ProcessCounter Inheritance Object ProcessCounter Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public sealed class ProcessCounter Properties IsProcessing Declaration public bool IsProcessing { get; } Property Value Type Description Boolean Version Declaration public int Version { get; } Property Value Type Description Int32 Methods Increment() Declaration public ProcessCounter.ProcessScope Increment() Returns Type Description ProcessCounter.ProcessScope"
  },
  "api/MackySoft.Navigathena.ProcessCounter.ProcessScope.html": {
    "href": "api/MackySoft.Navigathena.ProcessCounter.ProcessScope.html",
    "title": "Struct ProcessCounter.ProcessScope | Navigathena",
    "keywords": "Struct ProcessCounter.ProcessScope Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public readonly struct ProcessScope : IDisposable Constructors ProcessScope(ProcessCounter) Declaration public ProcessScope(ProcessCounter owner) Parameters Type Name Description ProcessCounter owner Methods Dispose() Declaration public readonly void Dispose()"
  },
  "api/MackySoft.Navigathena.ProgressDataStore.html": {
    "href": "api/MackySoft.Navigathena.ProgressDataStore.html",
    "title": "Class ProgressDataStore | Navigathena",
    "keywords": "Class ProgressDataStore Inheritance Object ProgressDataStore Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public static class ProgressDataStore Methods AsProgress(ITransitionHandle) Declaration public static IProgress<IProgressDataStore> AsProgress(this ITransitionHandle handle) Parameters Type Name Description ITransitionHandle handle Returns Type Description IProgress < IProgressDataStore > Exceptions Type Condition ArgumentNullException ConvertFrom<TFrom, TTo>(IProgress<TTo>, Func<TFrom, TTo>) Declaration public static IProgress<TFrom> ConvertFrom<TFrom, TTo>(IProgress<TTo> targetProgress, Func<TFrom, TTo> selector) Parameters Type Name Description IProgress <TTo> targetProgress Func <TFrom, TTo> selector Returns Type Description IProgress <TFrom> Type Parameters Name Description TFrom TTo GetData<T>(IProgressDataStore) Declaration public static T GetData<T>(this IProgressDataStore store) Parameters Type Name Description IProgressDataStore store Returns Type Description T Type Parameters Name Description T Exceptions Type Condition ArgumentNullException InvalidCastException GetDataOrDefault<T>(IProgressDataStore) Declaration public static T GetDataOrDefault<T>(this IProgressDataStore store) Parameters Type Name Description IProgressDataStore store Returns Type Description T Type Parameters Name Description T Exceptions Type Condition ArgumentNullException SetData<T>(IProgressDataStore, T) Declaration public static IProgressDataStore<T> SetData<T>(this IProgressDataStore store, T data) Parameters Type Name Description IProgressDataStore store T data Returns Type Description IProgressDataStore <T> Type Parameters Name Description T Exceptions Type Condition ArgumentNullException InvalidCastException TryGetData<T>(IProgressDataStore, out T) Declaration public static bool TryGetData<T>(this IProgressDataStore store, out T data) Parameters Type Name Description IProgressDataStore store T data Returns Type Description Boolean Type Parameters Name Description T Exceptions Type Condition ArgumentNullException"
  },
  "api/MackySoft.Navigathena.ProgressDataStore-1.html": {
    "href": "api/MackySoft.Navigathena.ProgressDataStore-1.html",
    "title": "Class ProgressDataStore<T> | Navigathena",
    "keywords": "Class ProgressDataStore<T> Inheritance Object ProgressDataStore<T> Implements IProgressDataStore <T> IProgressDataStore Namespace : MackySoft.Navigathena Assembly : cs.temp.dll.dll Syntax public sealed class ProgressDataStore<T> : IProgressDataStore<T>, IProgressDataStore Type Parameters Name Description T Constructors ProgressDataStore() Declaration public ProgressDataStore() ProgressDataStore(T) Declaration public ProgressDataStore(T data) Parameters Type Name Description T data Methods GetData() Declaration public T GetData() Returns Type Description T GetDataNonGeneric() Declaration public object GetDataNonGeneric() Returns Type Description Object SetData(T) Declaration public IProgressDataStore<T> SetData(T data) Parameters Type Name Description T data Returns Type Description IProgressDataStore <T> Implements IProgressDataStore<T> IProgressDataStore"
  },
  "api/MackySoft.Navigathena.SceneManagement.BlankSceneIdentifier.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.BlankSceneIdentifier.html",
    "title": "Class BlankSceneIdentifier | Navigathena",
    "keywords": "Class BlankSceneIdentifier Inheritance Object BlankSceneIdentifier Implements ISceneIdentifier Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class BlankSceneIdentifier : ISceneIdentifier Constructors BlankSceneIdentifier(String, Type) Declaration public BlankSceneIdentifier(string sceneName, Type entryPointType) Parameters Type Name Description String sceneName Type entryPointType Methods Create<T>(String) Declaration public static ISceneIdentifier Create<T>(string sceneName) where T : ISceneEntryPoint Parameters Type Name Description String sceneName Returns Type Description ISceneIdentifier Type Parameters Name Description T CreateHandle() Declaration public ISceneHandle CreateHandle() Returns Type Description ISceneHandle ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements ISceneIdentifier"
  },
  "api/MackySoft.Navigathena.SceneManagement.BuiltInSceneIdentifier.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.BuiltInSceneIdentifier.html",
    "title": "Class BuiltInSceneIdentifier | Navigathena",
    "keywords": "Class BuiltInSceneIdentifier Inheritance Object BuiltInSceneIdentifier Implements ISceneIdentifier Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class BuiltInSceneIdentifier : ISceneIdentifier Constructors BuiltInSceneIdentifier(String) Declaration public BuiltInSceneIdentifier(string sceneName) Parameters Type Name Description String sceneName Methods CreateHandle() Declaration public ISceneHandle CreateHandle() Returns Type Description ISceneHandle ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Implements ISceneIdentifier"
  },
  "api/MackySoft.Navigathena.SceneManagement.GlobalSceneNavigator.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.GlobalSceneNavigator.html",
    "title": "Class GlobalSceneNavigator | Navigathena",
    "keywords": "Class GlobalSceneNavigator A global ISceneNavigator that wraps ISceneNavigator . By default, this wraps StandardSceneNavigator , but Register(ISceneNavigator) can be used to register an ISceneNavigator that implements custom logic. Inheritance Object GlobalSceneNavigator Implements ISceneNavigator IUnsafeSceneNavigator Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class GlobalSceneNavigator : MonoBehaviour, ISceneNavigator Properties History Declaration public IReadOnlyCollection<IReadOnlySceneHistoryEntry> History { get; } Property Value Type Description IReadOnlyCollection < IReadOnlySceneHistoryEntry > InnerType Declaration public Type InnerType { get; } Property Value Type Description Type Instance Declaration public static GlobalSceneNavigator Instance { get; } Property Value Type Description GlobalSceneNavigator Methods Change(LoadSceneRequest, CancellationToken) Declaration public UniTask Change(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask EnsureInitialize() Declaration public static void EnsureInitialize() Pop(PopSceneRequest, CancellationToken) Declaration public UniTask Pop(PopSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description PopSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Push(LoadSceneRequest, CancellationToken) Declaration public UniTask Push(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Register(ISceneNavigator) ISceneNavigator instance for scene navigation within the GlobalSceneNavigator. This method should be called before any scene transitions are initiated to ensure the custom navigation logic is in place. Once the GlobalSceneNavigator has been initialized, subsequent calls to Register will be ignored. Declaration public void Register(ISceneNavigator sceneNavigator) Parameters Type Name Description ISceneNavigator sceneNavigator Exceptions Type Condition ArgumentNullException ArgumentException Thrown when attempting to register an instance of GlobalSceneNavigator itself. InvalidOperationException Thrown when attempting to register an instance of ISceneNavigator after GlobalSceneNavigator has been initialized. Reload(ReloadSceneRequest, CancellationToken) Declaration public UniTask Reload(ReloadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ReloadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Replace(LoadSceneRequest, CancellationToken) Declaration public UniTask Replace(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Explicit Interface Implementations ISceneNavigator.Initialize() Declaration UniTask ISceneNavigator.Initialize() Returns Type Description UniTask Implements ISceneNavigator IUnsafeSceneNavigator"
  },
  "api/MackySoft.Navigathena.SceneManagement.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.html",
    "title": "Namespace MackySoft.Navigathena.SceneManagement | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena.SceneManagement Classes BlankSceneIdentifier BuiltInSceneIdentifier GlobalSceneNavigator A global ISceneNavigator that wraps ISceneNavigator . By default, this wraps StandardSceneNavigator , but Register(ISceneNavigator) can be used to register an ISceneNavigator that implements custom logic. SceneDataStore SceneDataStoreExtensions SceneEntryPointBase SceneHistory SceneHistoryBuilderBase SceneHistoryEntry SceneNavigationException SceneNavigatorExtensions StandardSceneNavigator Default SceneNavigator used for Navigathena scene management. If you need to implement custom logic, use Register(ISceneNavigator) . StandardSceneProgressFactory Structs LoadSceneProgressData LoadSceneRequest PopSceneRequest ReloadSceneRequest SceneState Interfaces IReadOnlySceneHistoryEntry ISceneData This is the interface for data used to share data between scenes. Avoid having large references whenever possible, as this will remain in the history even after the scene is unloaded. Also, do not have references to GameObjects that exist in the scene. This leads to memory leaks. ISceneDataReader ISceneDataWriter ISceneEntryPoint ISceneHandle ISceneHistoryBuilder ISceneIdentifier ISceneNavigator ISceneProgressFactory"
  },
  "api/MackySoft.Navigathena.SceneManagement.IReadOnlySceneHistoryEntry.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.IReadOnlySceneHistoryEntry.html",
    "title": "Interface IReadOnlySceneHistoryEntry | Navigathena",
    "keywords": "Interface IReadOnlySceneHistoryEntry Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface IReadOnlySceneHistoryEntry Properties DataReader Declaration ISceneDataReader DataReader { get; } Property Value Type Description ISceneDataReader Scene Declaration ISceneIdentifier Scene { get; } Property Value Type Description ISceneIdentifier TransitionDirector Declaration ITransitionDirector TransitionDirector { get; } Property Value Type Description ITransitionDirector"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneData.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneData.html",
    "title": "Interface ISceneData | Navigathena",
    "keywords": "Interface ISceneData This is the interface for data used to share data between scenes. Avoid having large references whenever possible, as this will remain in the history even after the scene is unloaded. Also, do not have references to GameObjects that exist in the scene. This leads to memory leaks. Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneData"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneDataReader.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneDataReader.html",
    "title": "Interface ISceneDataReader | Navigathena",
    "keywords": "Interface ISceneDataReader Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneDataReader Methods ReadNonGeneric() Declaration ISceneData ReadNonGeneric() Returns Type Description ISceneData TryRead<T>(out T) Declaration bool TryRead<T>(out T result) where T : ISceneData Parameters Type Name Description T result Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneDataWriter.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneDataWriter.html",
    "title": "Interface ISceneDataWriter | Navigathena",
    "keywords": "Interface ISceneDataWriter Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneDataWriter Methods Write(ISceneData) Declaration void Write(ISceneData data) Parameters Type Name Description ISceneData data"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneEntryPoint.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneEntryPoint.html",
    "title": "Interface ISceneEntryPoint | Navigathena",
    "keywords": "Interface ISceneEntryPoint Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneEntryPoint Methods OnEnter(ISceneDataReader, CancellationToken) Declaration UniTask OnEnter(ISceneDataReader reader, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader CancellationToken cancellationToken Returns Type Description UniTask OnExit(ISceneDataWriter, CancellationToken) Declaration UniTask OnExit(ISceneDataWriter writer, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer CancellationToken cancellationToken Returns Type Description UniTask OnFinalize(ISceneDataWriter, IProgress<IProgressDataStore>, CancellationToken) Declaration UniTask OnFinalize(ISceneDataWriter writer, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask OnInitialize(ISceneDataReader, IProgress<IProgressDataStore>, CancellationToken) Declaration UniTask OnInitialize(ISceneDataReader reader, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneHandle.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneHandle.html",
    "title": "Interface ISceneHandle | Navigathena",
    "keywords": "Interface ISceneHandle Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneHandle Methods Load(IProgress<Single>, CancellationToken) Declaration UniTask<Scene> Load(IProgress<float> progress = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IProgress < Single > progress CancellationToken cancellationToken Returns Type Description UniTask < Scene > Unload(IProgress<Single>, CancellationToken) Declaration UniTask Unload(IProgress<float> progress = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description IProgress < Single > progress CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneHistoryBuilder.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneHistoryBuilder.html",
    "title": "Interface ISceneHistoryBuilder | Navigathena",
    "keywords": "Interface ISceneHistoryBuilder Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneHistoryBuilder Properties Count Declaration int Count { get; } Property Value Type Description Int32 Methods Add(SceneHistoryEntry) Declaration ISceneHistoryBuilder Add(SceneHistoryEntry entry) Parameters Type Name Description SceneHistoryEntry entry Returns Type Description ISceneHistoryBuilder Build() Declaration void Build() RemoveAllExceptCurrent() Declaration ISceneHistoryBuilder RemoveAllExceptCurrent() Returns Type Description ISceneHistoryBuilder RemoveAt(Int32) Declaration ISceneHistoryBuilder RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description ISceneHistoryBuilder"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneIdentifier.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneIdentifier.html",
    "title": "Interface ISceneIdentifier | Navigathena",
    "keywords": "Interface ISceneIdentifier Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneIdentifier Methods CreateHandle() Declaration ISceneHandle CreateHandle() Returns Type Description ISceneHandle"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneNavigator.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneNavigator.html",
    "title": "Interface ISceneNavigator | Navigathena",
    "keywords": "Interface ISceneNavigator Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneNavigator Properties History Declaration IReadOnlyCollection<IReadOnlySceneHistoryEntry> History { get; } Property Value Type Description IReadOnlyCollection < IReadOnlySceneHistoryEntry > Methods Change(LoadSceneRequest, CancellationToken) Reset the scene history and load the specified scene. Declaration UniTask Change(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Initialize() Declaration UniTask Initialize() Returns Type Description UniTask Pop(PopSceneRequest, CancellationToken) Load the first element in the scene history and remove it from the scene history. Declaration UniTask Pop(PopSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description PopSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Push(LoadSceneRequest, CancellationToken) Load the specified scene and add it to the scene history. Declaration UniTask Push(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Reload(ReloadSceneRequest, CancellationToken) Reload the current scene. Declaration UniTask Reload(ReloadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ReloadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Replace(LoadSceneRequest, CancellationToken) Replace the current scene with the specified scene. Declaration UniTask Replace(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.SceneManagement.ISceneProgressFactory.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ISceneProgressFactory.html",
    "title": "Interface ISceneProgressFactory | Navigathena",
    "keywords": "Interface ISceneProgressFactory Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public interface ISceneProgressFactory Methods CreateProgress(IProgressDataStore, IProgress<IProgressDataStore>) Declaration IProgress<float> CreateProgress(IProgressDataStore dataStore, IProgress<IProgressDataStore> targetProgress) Parameters Type Name Description IProgressDataStore dataStore IProgress < IProgressDataStore > targetProgress Returns Type Description IProgress < Single > CreateProgressDataStore() Declaration IProgressDataStore CreateProgressDataStore() Returns Type Description IProgressDataStore"
  },
  "api/MackySoft.Navigathena.SceneManagement.LoadSceneProgressData.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.LoadSceneProgressData.html",
    "title": "Struct LoadSceneProgressData | Navigathena",
    "keywords": "Struct LoadSceneProgressData Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public readonly struct LoadSceneProgressData Constructors LoadSceneProgressData(Single) Declaration public LoadSceneProgressData(float progress) Parameters Type Name Description Single progress Properties Progress Declaration public readonly float Progress { get; } Property Value Type Description Single"
  },
  "api/MackySoft.Navigathena.SceneManagement.LoadSceneRequest.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.LoadSceneRequest.html",
    "title": "Struct LoadSceneRequest | Navigathena",
    "keywords": "Struct LoadSceneRequest Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public readonly struct LoadSceneRequest Constructors LoadSceneRequest(ISceneIdentifier, ITransitionDirector, ISceneData, IAsyncOperation) Declaration public LoadSceneRequest(ISceneIdentifier scene, ITransitionDirector transitionDirector, ISceneData data, IAsyncOperation interruptOperation) Parameters Type Name Description ISceneIdentifier scene ITransitionDirector transitionDirector ISceneData data IAsyncOperation interruptOperation Properties Data Declaration public readonly ISceneData Data { get; } Property Value Type Description ISceneData InterruptOperation Declaration public readonly IAsyncOperation InterruptOperation { get; } Property Value Type Description IAsyncOperation Scene Declaration public readonly ISceneIdentifier Scene { get; } Property Value Type Description ISceneIdentifier TransitionDirector Declaration public readonly ITransitionDirector TransitionDirector { get; } Property Value Type Description ITransitionDirector"
  },
  "api/MackySoft.Navigathena.SceneManagement.PopSceneRequest.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.PopSceneRequest.html",
    "title": "Struct PopSceneRequest | Navigathena",
    "keywords": "Struct PopSceneRequest Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public readonly struct PopSceneRequest Constructors PopSceneRequest(ITransitionDirector, IAsyncOperation) Declaration public PopSceneRequest(ITransitionDirector overrideTransitionDirector, IAsyncOperation interruptOperation) Parameters Type Name Description ITransitionDirector overrideTransitionDirector IAsyncOperation interruptOperation Properties InterruptOperation Declaration public readonly IAsyncOperation InterruptOperation { get; } Property Value Type Description IAsyncOperation OverrideTransitionDirector Declaration public readonly ITransitionDirector OverrideTransitionDirector { get; } Property Value Type Description ITransitionDirector"
  },
  "api/MackySoft.Navigathena.SceneManagement.ReloadSceneRequest.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.ReloadSceneRequest.html",
    "title": "Struct ReloadSceneRequest | Navigathena",
    "keywords": "Struct ReloadSceneRequest Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public readonly struct ReloadSceneRequest Constructors ReloadSceneRequest(ITransitionDirector, IAsyncOperation) Declaration public ReloadSceneRequest(ITransitionDirector overrideTransitionDirector, IAsyncOperation interruptOperation) Parameters Type Name Description ITransitionDirector overrideTransitionDirector IAsyncOperation interruptOperation Properties InterruptOperation Declaration public readonly IAsyncOperation InterruptOperation { get; } Property Value Type Description IAsyncOperation OverrideTransitionDirector Declaration public readonly ITransitionDirector OverrideTransitionDirector { get; } Property Value Type Description ITransitionDirector"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneDataStore.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneDataStore.html",
    "title": "Class SceneDataStore | Navigathena",
    "keywords": "Class SceneDataStore Inheritance Object SceneDataStore Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class SceneDataStore Constructors SceneDataStore() Declaration public SceneDataStore() SceneDataStore(ISceneData) Declaration public SceneDataStore(ISceneData data) Parameters Type Name Description ISceneData data Properties Reader Declaration public ISceneDataReader Reader { get; } Property Value Type Description ISceneDataReader Writer Declaration public ISceneDataWriter Writer { get; } Property Value Type Description ISceneDataWriter"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneDataStoreExtensions.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneDataStoreExtensions.html",
    "title": "Class SceneDataStoreExtensions | Navigathena",
    "keywords": "Class SceneDataStoreExtensions Inheritance Object SceneDataStoreExtensions Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public static class SceneDataStoreExtensions Methods Read<T>(ISceneDataReader) Retrieves ISceneData with the specified type. Throws an exception if the type cast fails. Declaration public static T Read<T>(this ISceneDataReader reader) where T : ISceneData Parameters Type Name Description ISceneDataReader reader Returns Type Description T Type Parameters Name Description T Exceptions Type Condition ArgumentNullException InvalidCastException ReadOrDefault<T>(ISceneDataReader) Retrieves ISceneData with the specified type. Returns default value if type cast fails. Declaration public static T ReadOrDefault<T>(this ISceneDataReader reader) where T : ISceneData Parameters Type Name Description ISceneDataReader reader Returns Type Description T Type Parameters Name Description T Exceptions Type Condition ArgumentNullException"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneEntryPointBase.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneEntryPointBase.html",
    "title": "Class SceneEntryPointBase | Navigathena",
    "keywords": "Class SceneEntryPointBase Inheritance Object SceneEntryPointBase Implements ISceneEntryPoint Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public abstract class SceneEntryPointBase : MonoBehaviour, ISceneEntryPoint Methods OnEnter(ISceneDataReader, CancellationToken) Declaration protected virtual UniTask OnEnter(ISceneDataReader reader, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader CancellationToken cancellationToken Returns Type Description UniTask OnExit(ISceneDataWriter, CancellationToken) Declaration protected virtual UniTask OnExit(ISceneDataWriter writer, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer CancellationToken cancellationToken Returns Type Description UniTask OnFinalize(ISceneDataWriter, IProgress<IProgressDataStore>, CancellationToken) Declaration protected virtual UniTask OnFinalize(ISceneDataWriter writer, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask OnInitialize(ISceneDataReader, IProgress<IProgressDataStore>, CancellationToken) Declaration protected virtual UniTask OnInitialize(ISceneDataReader reader, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask Explicit Interface Implementations ISceneEntryPoint.OnEnter(ISceneDataReader, CancellationToken) Declaration UniTask ISceneEntryPoint.OnEnter(ISceneDataReader reader, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader CancellationToken cancellationToken Returns Type Description UniTask ISceneEntryPoint.OnExit(ISceneDataWriter, CancellationToken) Declaration UniTask ISceneEntryPoint.OnExit(ISceneDataWriter writer, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer CancellationToken cancellationToken Returns Type Description UniTask ISceneEntryPoint.OnFinalize(ISceneDataWriter, IProgress<IProgressDataStore>, CancellationToken) Declaration UniTask ISceneEntryPoint.OnFinalize(ISceneDataWriter writer, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataWriter writer IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask ISceneEntryPoint.OnInitialize(ISceneDataReader, IProgress<IProgressDataStore>, CancellationToken) Declaration UniTask ISceneEntryPoint.OnInitialize(ISceneDataReader reader, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneDataReader reader IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask Implements ISceneEntryPoint"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneHistory.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneHistory.html",
    "title": "Class SceneHistory | Navigathena",
    "keywords": "Class SceneHistory Inheritance Object SceneHistory Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class SceneHistory : IReadOnlyCollection<SceneHistoryEntry>, IEnumerable<SceneHistoryEntry>, IEnumerable Constructors SceneHistory() Declaration public SceneHistory() SceneHistory(IEnumerable<SceneHistoryEntry>) Declaration public SceneHistory(IEnumerable<SceneHistoryEntry> entries) Parameters Type Name Description IEnumerable < SceneHistoryEntry > entries Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Clear() Declaration public void Clear() GetEnumerator() Declaration public IEnumerator<SceneHistoryEntry> GetEnumerator() Returns Type Description IEnumerator < SceneHistoryEntry > Peek() Declaration public SceneHistoryEntry Peek() Returns Type Description SceneHistoryEntry Pop() Declaration public SceneHistoryEntry Pop() Returns Type Description SceneHistoryEntry Push(SceneHistoryEntry) Declaration public void Push(SceneHistoryEntry entry) Parameters Type Name Description SceneHistoryEntry entry TryPeek(out SceneHistoryEntry) Declaration public bool TryPeek(out SceneHistoryEntry result) Parameters Type Name Description SceneHistoryEntry result Returns Type Description Boolean TryPop(out SceneHistoryEntry) Declaration public bool TryPop(out SceneHistoryEntry result) Parameters Type Name Description SceneHistoryEntry result Returns Type Description Boolean"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneHistoryBuilderBase.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneHistoryBuilderBase.html",
    "title": "Class SceneHistoryBuilderBase | Navigathena",
    "keywords": "Class SceneHistoryBuilderBase Inheritance Object SceneHistoryBuilderBase Implements ISceneHistoryBuilder Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public abstract class SceneHistoryBuilderBase : ISceneHistoryBuilder Constructors SceneHistoryBuilderBase() Declaration protected SceneHistoryBuilderBase() SceneHistoryBuilderBase(IEnumerable<SceneHistoryEntry>) Declaration protected SceneHistoryBuilderBase(IEnumerable<SceneHistoryEntry> history) Parameters Type Name Description IEnumerable < SceneHistoryEntry > history Fields m_History Declaration protected readonly List<SceneHistoryEntry> m_History Field Value Type Description List < SceneHistoryEntry > Properties Count Declaration public int Count { get; } Property Value Type Description Int32 Methods Add(SceneHistoryEntry) Declaration public ISceneHistoryBuilder Add(SceneHistoryEntry entry) Parameters Type Name Description SceneHistoryEntry entry Returns Type Description ISceneHistoryBuilder Build() Declaration public abstract void Build() RemoveAllExceptCurrent() Declaration public ISceneHistoryBuilder RemoveAllExceptCurrent() Returns Type Description ISceneHistoryBuilder RemoveAt(Int32) Declaration public ISceneHistoryBuilder RemoveAt(int index) Parameters Type Name Description Int32 index Returns Type Description ISceneHistoryBuilder Implements ISceneHistoryBuilder"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneHistoryEntry.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneHistoryEntry.html",
    "title": "Class SceneHistoryEntry | Navigathena",
    "keywords": "Class SceneHistoryEntry Inheritance Object SceneHistoryEntry Implements IReadOnlySceneHistoryEntry Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class SceneHistoryEntry : IReadOnlySceneHistoryEntry Constructors SceneHistoryEntry(ISceneIdentifier, ITransitionDirector, SceneDataStore) Declaration public SceneHistoryEntry(ISceneIdentifier scene, ITransitionDirector transitionDirectorData, SceneDataStore sceneDataStore) Parameters Type Name Description ISceneIdentifier scene ITransitionDirector transitionDirectorData SceneDataStore sceneDataStore Properties DataStore Declaration public SceneDataStore DataStore { get; } Property Value Type Description SceneDataStore Scene Declaration public ISceneIdentifier Scene { get; } Property Value Type Description ISceneIdentifier TransitionDirector Declaration public ITransitionDirector TransitionDirector { get; } Property Value Type Description ITransitionDirector Explicit Interface Implementations IReadOnlySceneHistoryEntry.DataReader Declaration ISceneDataReader IReadOnlySceneHistoryEntry.DataReader { get; } Returns Type Description ISceneDataReader Implements IReadOnlySceneHistoryEntry"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneNavigationException.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneNavigationException.html",
    "title": "Class SceneNavigationException | Navigathena",
    "keywords": "Class SceneNavigationException Inheritance Object Exception SystemException InvalidOperationException SceneNavigationException Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class SceneNavigationException : InvalidOperationException, ISerializable, _Exception Constructors SceneNavigationException() Declaration public SceneNavigationException() SceneNavigationException(String) Declaration public SceneNavigationException(string message) Parameters Type Name Description String message SceneNavigationException(String, Exception) Declaration public SceneNavigationException(string message, Exception innerException) Parameters Type Name Description String message Exception innerException"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneNavigatorExtensions.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneNavigatorExtensions.html",
    "title": "Class SceneNavigatorExtensions | Navigathena",
    "keywords": "Class SceneNavigatorExtensions Inheritance Object SceneNavigatorExtensions Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public static class SceneNavigatorExtensions Methods CanPop(ISceneNavigator) Whether navigator can go back to one previous scene by . Declaration public static bool CanPop(this ISceneNavigator navigator) Parameters Type Name Description ISceneNavigator navigator Returns Type Description Boolean Change(ISceneNavigator, ISceneIdentifier, ITransitionDirector, ISceneData, IAsyncOperation, CancellationToken) Declaration public static UniTask Change(this ISceneNavigator navigator, ISceneIdentifier scene, ITransitionDirector transitionDirector = null, ISceneData data = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ISceneNavigator navigator ISceneIdentifier scene ITransitionDirector transitionDirector ISceneData data IAsyncOperation interruptOperation CancellationToken cancellationToken Returns Type Description UniTask Pop(ISceneNavigator, ITransitionDirector, IAsyncOperation, CancellationToken) Declaration public static UniTask Pop(this ISceneNavigator navigator, ITransitionDirector transitionDirector = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ISceneNavigator navigator ITransitionDirector transitionDirector IAsyncOperation interruptOperation CancellationToken cancellationToken Returns Type Description UniTask Push(ISceneNavigator, ISceneIdentifier, ITransitionDirector, ISceneData, IAsyncOperation, CancellationToken) Declaration public static UniTask Push(this ISceneNavigator navigator, ISceneIdentifier scene, ITransitionDirector transitionDirector = null, ISceneData data = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ISceneNavigator navigator ISceneIdentifier scene ITransitionDirector transitionDirector ISceneData data IAsyncOperation interruptOperation CancellationToken cancellationToken Returns Type Description UniTask Reload(ISceneNavigator, ITransitionDirector, IAsyncOperation, CancellationToken) Declaration public static UniTask Reload(this ISceneNavigator navigator, ITransitionDirector transitionDirector = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ISceneNavigator navigator ITransitionDirector transitionDirector IAsyncOperation interruptOperation CancellationToken cancellationToken Returns Type Description UniTask Replace(ISceneNavigator, ISceneIdentifier, ITransitionDirector, ISceneData, IAsyncOperation, CancellationToken) Declaration public static UniTask Replace(this ISceneNavigator navigator, ISceneIdentifier scene, ITransitionDirector transitionDirector = null, ISceneData data = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ISceneNavigator navigator ISceneIdentifier scene ITransitionDirector transitionDirector ISceneData data IAsyncOperation interruptOperation CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.SceneManagement.SceneState.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.SceneState.html",
    "title": "Struct SceneState | Navigathena",
    "keywords": "Struct SceneState Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public readonly struct SceneState Constructors SceneState(ISceneIdentifier, ISceneHandle, ISceneEntryPoint) Declaration public SceneState(ISceneIdentifier identifier, ISceneHandle handle, ISceneEntryPoint entryPoint) Parameters Type Name Description ISceneIdentifier identifier ISceneHandle handle ISceneEntryPoint entryPoint Properties EntryPoint Declaration public readonly ISceneEntryPoint EntryPoint { get; } Property Value Type Description ISceneEntryPoint Handle Declaration public readonly ISceneHandle Handle { get; } Property Value Type Description ISceneHandle Identifier Declaration public readonly ISceneIdentifier Identifier { get; } Property Value Type Description ISceneIdentifier"
  },
  "api/MackySoft.Navigathena.SceneManagement.StandardSceneNavigator.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.StandardSceneNavigator.html",
    "title": "Class StandardSceneNavigator | Navigathena",
    "keywords": "Class StandardSceneNavigator Default SceneNavigator used for Navigathena scene management. If you need to implement custom logic, use Register(ISceneNavigator) . Inheritance Object StandardSceneNavigator Implements ISceneNavigator IUnsafeSceneNavigator Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class StandardSceneNavigator : ISceneNavigator, IDisposable Constructors StandardSceneNavigator() Declaration public StandardSceneNavigator() StandardSceneNavigator(ITransitionDirector, ISceneProgressFactory) Declaration public StandardSceneNavigator(ITransitionDirector defaultTransitionDirector, ISceneProgressFactory sceneProgressFactory) Parameters Type Name Description ITransitionDirector defaultTransitionDirector ISceneProgressFactory sceneProgressFactory Properties History Declaration public IReadOnlyCollection<IReadOnlySceneHistoryEntry> History { get; } Property Value Type Description IReadOnlyCollection < IReadOnlySceneHistoryEntry > Methods Change(LoadSceneRequest, CancellationToken) Declaration public async UniTask Change(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Dispose() Declaration public void Dispose() Initialize() Declaration public async UniTask Initialize() Returns Type Description UniTask Pop(PopSceneRequest, CancellationToken) Declaration public async UniTask Pop(PopSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description PopSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Push(LoadSceneRequest, CancellationToken) Declaration public async UniTask Push(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Reload(ReloadSceneRequest, CancellationToken) Declaration public async UniTask Reload(ReloadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description ReloadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Replace(LoadSceneRequest, CancellationToken) Declaration public async UniTask Replace(LoadSceneRequest request, CancellationToken cancellationToken = default(CancellationToken)) Parameters Type Name Description LoadSceneRequest request CancellationToken cancellationToken Returns Type Description UniTask Implements ISceneNavigator IUnsafeSceneNavigator"
  },
  "api/MackySoft.Navigathena.SceneManagement.StandardSceneProgressFactory.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.StandardSceneProgressFactory.html",
    "title": "Class StandardSceneProgressFactory | Navigathena",
    "keywords": "Class StandardSceneProgressFactory Inheritance Object StandardSceneProgressFactory Implements ISceneProgressFactory Namespace : MackySoft.Navigathena.SceneManagement Assembly : cs.temp.dll.dll Syntax public sealed class StandardSceneProgressFactory : ISceneProgressFactory Methods CreateProgress(IProgressDataStore, IProgress<IProgressDataStore>) Declaration public IProgress<float> CreateProgress(IProgressDataStore dataStore, IProgress<IProgressDataStore> targetProgress) Parameters Type Name Description IProgressDataStore dataStore IProgress < IProgressDataStore > targetProgress Returns Type Description IProgress < Single > CreateProgressDataStore() Declaration public IProgressDataStore CreateProgressDataStore() Returns Type Description IProgressDataStore Implements ISceneProgressFactory"
  },
  "api/MackySoft.Navigathena.SceneManagement.Unsafe.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Unsafe.html",
    "title": "Namespace MackySoft.Navigathena.SceneManagement.Unsafe | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena.SceneManagement.Unsafe Classes UnsafeSceneNavigatorExtensions Interfaces IUnsafeSceneNavigator"
  },
  "api/MackySoft.Navigathena.SceneManagement.Unsafe.IUnsafeSceneNavigator.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Unsafe.IUnsafeSceneNavigator.html",
    "title": "Interface IUnsafeSceneNavigator | Navigathena",
    "keywords": "Interface IUnsafeSceneNavigator Namespace : MackySoft.Navigathena.SceneManagement.Unsafe Assembly : cs.temp.dll.dll Syntax public interface IUnsafeSceneNavigator Methods GetHistoryBuilderUnsafe() Get ISceneHistoryBuilder to edit scene history directly. Declaration ISceneHistoryBuilder GetHistoryBuilderUnsafe() Returns Type Description ISceneHistoryBuilder"
  },
  "api/MackySoft.Navigathena.SceneManagement.Unsafe.UnsafeSceneNavigatorExtensions.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Unsafe.UnsafeSceneNavigatorExtensions.html",
    "title": "Class UnsafeSceneNavigatorExtensions | Navigathena",
    "keywords": "Class UnsafeSceneNavigatorExtensions Inheritance Object UnsafeSceneNavigatorExtensions Namespace : MackySoft.Navigathena.SceneManagement.Unsafe Assembly : cs.temp.dll.dll Syntax public static class UnsafeSceneNavigatorExtensions Methods GetHistoryBuilderUnsafe(ISceneNavigator) Declaration public static ISceneHistoryBuilder GetHistoryBuilderUnsafe(this ISceneNavigator navigator) Parameters Type Name Description ISceneNavigator navigator Returns Type Description ISceneHistoryBuilder"
  },
  "api/MackySoft.Navigathena.SceneManagement.Utilities.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Utilities.html",
    "title": "Namespace MackySoft.Navigathena.SceneManagement.Utilities | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena.SceneManagement.Utilities Classes SceneNavigatorHelper A simple set of functions for logic used in SceneNavigator. This may be useful when implementing a custom SceneNavigator. SceneUtility"
  },
  "api/MackySoft.Navigathena.SceneManagement.Utilities.SceneNavigatorHelper.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Utilities.SceneNavigatorHelper.html",
    "title": "Class SceneNavigatorHelper | Navigathena",
    "keywords": "Class SceneNavigatorHelper A simple set of functions for logic used in SceneNavigator. This may be useful when implementing a custom SceneNavigator. Inheritance Object SceneNavigatorHelper Namespace : MackySoft.Navigathena.SceneManagement.Utilities Assembly : cs.temp.dll.dll Syntax public static class SceneNavigatorHelper Methods CreateTransitionHandle(ITransitionDirector) Declaration public static TransitionDirectorState CreateTransitionHandle(ITransitionDirector transitionDirector) Parameters Type Name Description ITransitionDirector transitionDirector Returns Type Description TransitionDirectorState FindFirstEntryPointInAllScenes() Declaration public static (Scene sceneThatContainsEntryPoint, ISceneEntryPoint firstEntryPoint) FindFirstEntryPointInAllScenes() Returns Type Description (T1, T2) < Scene , ISceneEntryPoint > FirstEnterSceneSequence(ISceneEntryPoint, SceneDataStore, CancellationToken) Declaration public static async UniTask FirstEnterSceneSequence(ISceneEntryPoint entryPoint, SceneDataStore dataStore, CancellationToken cancellationToken) Parameters Type Name Description ISceneEntryPoint entryPoint SceneDataStore dataStore CancellationToken cancellationToken Returns Type Description UniTask LoadSceneAndGetEntryPoint(ISceneIdentifier, ISceneProgressFactory, IProgressDataStore, IProgress<IProgressDataStore>, CancellationToken) Declaration public static async UniTask<SceneState> LoadSceneAndGetEntryPoint(ISceneIdentifier scene, ISceneProgressFactory sceneProgressFactory, IProgressDataStore progressDataStore, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description ISceneIdentifier scene ISceneProgressFactory sceneProgressFactory IProgressDataStore progressDataStore IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask < SceneState > TryExecuteInterruptOperation(IAsyncOperation, IProgress<IProgressDataStore>, CancellationToken) Declaration public static async UniTask TryExecuteInterruptOperation(IAsyncOperation interruptOperation, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) Parameters Type Name Description IAsyncOperation interruptOperation IProgress < IProgressDataStore > progress CancellationToken cancellationToken Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.SceneManagement.Utilities.SceneUtility.html": {
    "href": "api/MackySoft.Navigathena.SceneManagement.Utilities.SceneUtility.html",
    "title": "Class SceneUtility | Navigathena",
    "keywords": "Class SceneUtility Inheritance Object SceneUtility Namespace : MackySoft.Navigathena.SceneManagement.Utilities Assembly : cs.temp.dll.dll Syntax public static class SceneUtility Methods GetComponentInScene<T>(Scene, Boolean) Declaration public static T GetComponentInScene<T>(this Scene scene, bool includeInactive) Parameters Type Name Description Scene scene Boolean includeInactive Returns Type Description T Type Parameters Name Description T GetComponentInSceneOrDefault<T>(Scene, Boolean) Declaration public static T GetComponentInSceneOrDefault<T>(this Scene scene, bool includeInactive) Parameters Type Name Description Scene scene Boolean includeInactive Returns Type Description T Type Parameters Name Description T TryGetComponentInScene<T>(Scene, out T, Boolean) Declaration public static bool TryGetComponentInScene<T>(this Scene scene, out T result, bool includeInactive) Parameters Type Name Description Scene scene T result Boolean includeInactive Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/MackySoft.Navigathena.Transitions.html": {
    "href": "api/MackySoft.Navigathena.Transitions.html",
    "title": "Namespace MackySoft.Navigathena.Transitions | Navigathena",
    "keywords": "Namespace MackySoft.Navigathena.Transitions Classes TransitionDirector Structs TransitionDirectorState Interfaces ITransitionDirector ITransitionHandle"
  },
  "api/MackySoft.Navigathena.Transitions.ITransitionDirector.html": {
    "href": "api/MackySoft.Navigathena.Transitions.ITransitionDirector.html",
    "title": "Interface ITransitionDirector | Navigathena",
    "keywords": "Interface ITransitionDirector Namespace : MackySoft.Navigathena.Transitions Assembly : cs.temp.dll.dll Syntax public interface ITransitionDirector Methods CreateHandle() Declaration ITransitionHandle CreateHandle() Returns Type Description ITransitionHandle"
  },
  "api/MackySoft.Navigathena.Transitions.ITransitionHandle.html": {
    "href": "api/MackySoft.Navigathena.Transitions.ITransitionHandle.html",
    "title": "Interface ITransitionHandle | Navigathena",
    "keywords": "Interface ITransitionHandle Namespace : MackySoft.Navigathena.Transitions Assembly : cs.temp.dll.dll Syntax public interface ITransitionHandle Methods End(CancellationToken) Declaration UniTask End(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellation Returns Type Description UniTask Start(CancellationToken) Declaration UniTask Start(CancellationToken cancellation = default(CancellationToken)) Parameters Type Name Description CancellationToken cancellation Returns Type Description UniTask"
  },
  "api/MackySoft.Navigathena.Transitions.TransitionDirector.html": {
    "href": "api/MackySoft.Navigathena.Transitions.TransitionDirector.html",
    "title": "Class TransitionDirector | Navigathena",
    "keywords": "Class TransitionDirector Inheritance Object TransitionDirector Namespace : MackySoft.Navigathena.Transitions Assembly : cs.temp.dll.dll Syntax public static class TransitionDirector Methods Empty() Declaration public static ITransitionDirector Empty() Returns Type Description ITransitionDirector"
  },
  "api/MackySoft.Navigathena.Transitions.TransitionDirectorState.html": {
    "href": "api/MackySoft.Navigathena.Transitions.TransitionDirectorState.html",
    "title": "Struct TransitionDirectorState | Navigathena",
    "keywords": "Struct TransitionDirectorState Namespace : MackySoft.Navigathena.Transitions Assembly : cs.temp.dll.dll Syntax public readonly struct TransitionDirectorState Constructors TransitionDirectorState(ITransitionHandle, IProgress<IProgressDataStore>) Declaration public TransitionDirectorState(ITransitionHandle handle, IProgress<IProgressDataStore> progress) Parameters Type Name Description ITransitionHandle handle IProgress < IProgressDataStore > progress Properties Handle Declaration public readonly ITransitionHandle Handle { get; } Property Value Type Description ITransitionHandle Progress Declaration public readonly IProgress<IProgressDataStore> Progress { get; } Property Value Type Description IProgress < IProgressDataStore >"
  },
  "changelog/CHANGELOG.html": {
    "href": "changelog/CHANGELOG.html",
    "title": "Changelog | Navigathena",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2023-10-24 First release"
  },
  "index.html": {
    "href": "index.html",
    "title": "Navigathena - Scene management framework for Unity | Navigathena",
    "keywords": "Navigathena - Scene management framework for Unity Created by Hiroya Aramaki ( Makihiro ) What is Navigathena ? Navigathena is a scene management framework designed for Unity. Scene transition control with basic history feature. High functionality, capable of supporting use cases that require more advanced control. Highly scalable, most elements can be extended to suit the project. Implemented based on a clean design concept, it provides a robust framework that can withstand large-scale development. Table of Contents 📥 Installation 🔰 Usage Basic scene navigation SceneNavigator SceneEntryPoint Transition director Progress display Interrupt operation Inter-scene data transfer Single scene launch Interrupt scene operation Scene history editing 📚 Integrations Addressables System Dependency injection ❓ FAQ How to load multiple scenes (sub-scenes)? How to have a scene that is always present throughout the life of the application? ✉ Help & Contribute 📔 Author Info 📜 License 📥 Installation Requirement Navigathena depends on UniTask , which supports async / await. Please import UniTask into your project first. UniTask: https://github.com/Cysharp/UniTask Install via .unitypackage Download any version from releases. Releases: https://github.com/mackysoft/Navigathena/releases Install via PackageManager Or, you can add this package by opening PackageManager and entering https://github.com/mackysoft/Navigathena.git?path=Assets/MackySoft/MackySoft.Navigathena from the Add package from git URL option. Install via Open UPM Or, you can install this package from the Open UPM registry. More details here . openupm add com.mackysoft.navigathena 🔰 Usage The following code illustrates the use of Navigathena basic elements. using UnityEngine; using UnityEngine.UI; using System.Threading; using Cysharp.Threading.Tasks; using MackySoft.Navigathena.SceneManagement; // Defines the entry point for the scene. public sealed class HomeSceneEntryPoint : SceneEntryPointBase { // Define the scene to be used. static readonly ISceneIdentifier s_GameSceneIdentifier = new BuiltInSceneIdentifier(\"Game\"); [SerializeField] Button m_LoadGameButton; IDisposable m_Subscription; // The basic lifecycle of the scene is invoked. (OnInitialize, OnEnter, OnExit, OnFinalize...) protected override UniTask OnEnter (ISceneDataReader reader, CancellationToken cancellationToken) { m_Subscription = m_LoadGameButton.OnClickAsAsyncEnumerable().SubscribeAwait(_ => OnLoadGameButtonClick()); return UniTask.CompletedTask; } protected override UniTask OnExit (ISceneDataWriter writer, CancellationToken cancellationToken) { m_Subscription?.Dispose(); return UniTask.CompletedTask; } async UniTask OnLoadGameButtonClick () { // Perform scene transition operations via GlobalSceneNavigator. await GlobalSceneNavigator.Instance.Push(s_GameSceneIdentifier); } } The full Scripting API is here . Scripting API: https://mackysoft.github.io/Navigathena/api/MackySoft.Navigathena.html Basic scene navigation Navigathena has two basic concepts for scene transitions: SceneNavigator and SceneEntryPoint. SceneNavigator Navigathena provides an interface called ISceneNavigator for managing and navigating scenes. This interface allows basic transition operations while handling the history of scenes. Here's a simple usage example of ISceneNavigator : ISceneIdentifier identifier = new BuiltInSceneIdentifier(\"Game\"); await GlobalSceneNavigator.Instance.Push(identifier); To specify a scene, the ISceneIdentifier interface is used. By default, BuiltInSceneIdentifier is implemented, which can be used for standard loading of scenes registered in Unity Build Settings. For examples using Addressables, refer to the Integration with the Addressables System section below. Below are the transition operations provided by ISceneNavigator . interface ISceneNavigator { // Load the specified scene and add it to the history. UniTask Push (ISceneIdentifier identifier, ITransitionDirector transitionDirector = null, ISceneData sceneData = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default); // Remove the head scene in the history and load the previous one. UniTask Pop (ITransitionDirector overrideTransitionDirector = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default); // Load the specified scene and overwrite the history with only that scene. UniTask Change (ISceneIdentifier identifier, ITransitionDirector transitionDirector = null, ISceneData sceneData = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default); // Load the specified scene and overwrite the head of the history. UniTask Replace (ISceneIdentifier identifier, ITransitionDirector transitionDirector = null, ISceneData sceneData = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default); // Reload then current scene. UniTask Reload (ITransitionDirector overrideTransitionDirector = null, IAsyncOperation interruptOperation = null, CancellationToken cancellationToken = default); } These methods are actually implemented by extension methods for ISceneNavigator . SceneNavigator is abstracted through an interface, so if unique processing is required in your project, it is possible to implement a custom SceneNavigator. (If not specified, StandardSceneNavigator will be used.) [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)] static void Initialize () { // Register a custom SceneNavigator GlobalSceneNavigator.Instance.Register(new MyCustomSceneNavigator()); } Since scene management typically uses the same logic from the beginning to the end of a game's lifespan, a singleton GlobalSceneNavigator component has been implemented. This wraps the registered ISceneNavigator and supports features such as the single scene launch mentioned later. Incidentally, the GlobalSceneNavigator inspector allows you to view the registered ISceneNavigator and its current history. SceneEntryPoint The SceneEntryPoint concept is used to observe the lifecycle of a scene. It is a component that can be placed only once in each scene and plays a role in observing events such as the start and end of a scene, as well as the transfer of data. public interface ISceneEntryPoint { // Called after the start of the transition direction. UniTask OnInitialize (ISceneDataReader reader, IProgress<IProgressDataStore> transitionProgress, CancellationToken cancellationToken); // Called after the end of the transition direction. UniTask OnEnter (ISceneDataReader reader, CancellationToken cancellationToken); // Called before the start of the transition direction. UniTask OnExit (ISceneDataWriter writer, CancellationToken cancellationToken); // Called after the start of the transition direction. UniTask OnFinalize (ISceneDataWriter writer, IProgress<IProgressDataStore> transitionProgress, CancellationToken cancellationToken); #if UNITY_EDITOR // Called before `OnInitialize` in the first loaded scene when executed in the editor. (Editor only) UniTask OnEditorFirstPreInitialize (ISceneDataWriter writer, CancellationToken cancellationToken); #endif } Basically, SceneEntryPoint is designed to inherit from SceneEntryPointBase or ISceneEntryPoint and override each event. For a method of implementation that does not depend on inheriting MonoBehaviour , please refer to the Integration with Dependency Injection (DI) section. When a transition operation is called, the following processes are executed in sequence: The OnExit of the origin ISceneEntryPoint The Start of the ITransitionHandle created from the ITransitionDirector passed during the transition operation The OnFinalize of the origin ISceneEntryPoint Unloading of the origin scene The ExecuteAsync of the IAsyncOperation passed during the transition operation Loading of the destination scene The OnInitialize of the destination ISceneEntryPoint The End of the ITransitionHandle used in step 2 The OnEnter of the destination ISceneEntryPoint The roles of each event will be explained in the topics that follow. Transition director One of the elements that enhance the gaming experience is the scene transition direction. This could range from a simple fade-in and fade-out to the display of tips or animations of mini characters running across the screen. Regardless of how the implementation is done, you might animate the Canvas element, or you might load an additional transition direction scene. In any case, it's essential for the system to be flexible, meaning that different types of directions can be easily added or changed. In Navigathena, the transition direction during scene transitions are defined by the ITransitionDirector interface, and you can pass the ITransitionDirector as an argument when performing a scene transition operation. The specific flow is as follows: when a scene transition begins, the transition effect defined by the ITransitionDirector starts first. During this effect, the following processes are executed in order: public interface ITransitionDirector { ITransitionHandle CreateHandle (); } public interface ITransitionHandle { UniTask Start (CancellationToken cancellationToken = default); UniTask End (CancellationToken cancellationToken = default); } The ITransitionDirector acts as a factory for producing ITransitionHandle , which is an interface to control the start and end of transition directions. By extending based on this ITransitionDirector and ITransitionHandle , you can control your own unique transition directions. Below is an implementation example of the SimpleTransitionDirector , which realizes a transition through a simple fade direction. public sealed class SimpleTransitionDirector : ITransitionDirector { readonly CanvasGroup m_CanvasGroup; public SimpleTransitionDirector (CanvasGroup canvasGroup) { m_CanvasGroup = canvasGroup; } public ITransitionHandle Create () { return new SimpleTransitionHandle(m_CanvasGroup); } sealed class SimpleTransitionHandle : ITransitionHandle { readonly CanvasGroup m_CanvasGroup; public SimpleTransitionHandle (CanvasGroup canvasGroup) { m_CanvasGroup = canvasGroup; } public async UniTask Start (CancellationToken cancellationToken = default) { // Play fade-in with DOTween. await m_CanvasGroup.DOFade(1f, 1f).ToUniTask(cancellationToken: cancellationToken); } public async UniTask End (CancellationToken cancellationToken = default) { await m_CanvasGroup.DOFade(0f, 1f).ToUniTask(cancellationToken: cancellationToken); } } } // Load a new scene while executing the direction with SimpleTransitionDirector. await GlobalSceneNavigator.Instance.Push(new BuiltInSceneIdentifier(\"MyScene\"), new SimpleTransitionDirector(m_CanvasGroup)); Progress display In direction during transitions, it's not uncommon to require effects that display progress percentages and effects that vary based on the progress percentage. With Navigathena, during a transition direction, you can pass any data type through IProgress<IProgressDataStore> . Processes interjected during transition direction (such as ISceneEntryPoint.OnInitialize / OnFinalize , IAsyncOperation.ExecuteAsync ) are given IProgress<IProgressDataStore> . By writing data into IProgressDataStore and notifying through IProgress<IProgressDataStore> , you can incorporate information like transition progress or messages that you want to present to the player into the direction. Below is an example that extends the earlier mentioned SimpleTransitionDirector to support progress display. // Defines an arbitrary data type to be used as progress information. public readonly struct MyProgressData { public float Progress { get; } public string Message { get; } public MyProgressData (float progress, string message) { Progress = progress; Message = message; } } public sealed class SimpleTransitionDirector : ITransitionDirector { readonly CanvasGroup m_CanvasGroup; readonly Text m_ProgressText; readonly Text m_MessageText; readonly Slider m_ProgressSlider; public SimpleTransitionDirector (CanvasGroup canvasGroup, Text progressText, Text messageText, Slider progressSlider) { m_CanvasGroup = canvasGroup; m_ProgressText = progressText; m_MessageText = messageText; m_ProgressSlider = progressSlider; } public ITransitionHandle Create () { return new SimpleTransitionHandle(m_CanvasGroup, m_ProgressText, m_MessageText, m_ProgressSlider); } // By implementing IProgress<IProgressDataStore>, it is possible to receive progress information during the transition direction. sealed class SimpleTransitionHandle : ITransitionHandle, IProgress<IProgressDataStore> { readonly CanvasGroup m_CanvasGroup; readonly Text m_ProgressText; readonly Text m_MessageText; readonly Slider m_ProgressSlider; public SimpleTransitionHandle (CanvasGroup canvasGroup, Text progressText, Text messageText, SLider progressSlider) { m_CanvasGroup = canvasGroup; m_ProgressText = progressText; m_MessageText = messageText; m_ProgressSlider = progressSlider; } public async UniTask Start (CancellationToken cancellationToken = default) { await m_CanvasGroup.DOFade(1f,1f).ToUniTask(cancellationToken: cancellationToken); } public async UniTask Complete (CancellationToken cancellationToken = default) { await m_CanvasGroup.DOFade(0f,1f).ToUniTask(cancellationToken: cancellationToken); } void IProgress<IProgressDataStore>.Report (IProgressDataStore progressDataStore) { // Extract MyProgressData from IProgressStore. if (progressDataStore.TryGetData(out MyProgressData myProgressData)) { m_ProgressText.text = myProgressData.Progress.ToString(\"P0\"); m_MessageText.text = myProgressData.Message; m_ProgressSlider.value = myProgressData.Progress; } } } } // Pass SimpleTransitionDirector when performing the transition operation. await GlobalSceneNavigator.Instance.Push(new BuiltInSceneIdentifier(\"MyScene\"), new SimpleTransitionDirector(m_CanvasGroup, m_ProgressText, m_MessageText, m_ProgressSlider)); // ... // When notifying progress, it gets notified up to the SimpleTransitionDirector. protected override UniTask OnInitialize (ISceneDataReader reader, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) { ProgressDataStore<MyProgressData> store = new(); progress.Report(store.SetData(new MyProgressData(0.5f, \"Generate Map\"))); await m_MapGenerator.Generate(cancellationToken); progress.Report(store.SetData(new MyProgressData(1f, \"Complete\"))); } To ensure versatility, data can be obtained through IProgressDataStore.TryGetData<T> . (Internally, it casts IProgressDataStore to IProgressDataStore<T> to extract the type.) Although it's not type-safe, i deemed this implementation appropriate to prevent wasteful allocations due to boxing and to avoid losing simplicity due to the propagation of generics. When a scene is loaded or unloaded, by default, the StandardSceneNavigator stores LoadSceneProgressData in IProgressDataStore . The behavior here can also be customized from the constructor of StandardSceneNavigator . [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)] static void Initialize () { // Initialize and register the StandardSceneNavigator with our own MySceneProgressFactory. GlobalSceneNavigator.Instance.Register(new StandardSceneNavigator(TransitionDirector.Empty(), new MySceneProgressFactory())); } Interrupt operation When scene transitioning, it is sometimes necessary to insert a pre-load process or some kind of pre-check process. Navigathena define the IAsyncOperation interface to perform processes to be performed between the unloading of the current scene and the loading of the next scene . The IAsyncOperation can be passed during each transition operation in ISceneNavigator . IAsyncOperation op = m_PreloadAsyncOperation; await GlobalSceneNavigator.Push(nextScene, interruptOperation: op); The structure of IAsyncOperation is very simple, it defines functions to perform asynchronous operations. Since `IProgress<IProgressDataStore> is passed as an argument, it can be integrated with the progress display during transition direction. public interface IAsyncOperation { UniTask ExecuteAsync (IProgress<IProgressDataStore> progress, CancellationToken cancellationToken = default); } Basically, you would define a type that implements IAsyncOperation , but there are also some convenience functions for convenient handling. // Create an anonymous IAsyncOperation IAsyncOperation operation = AsyncOperation.Create(async (progress, cancellationToken) => { // Asynchronous processing of some kind await DoSomething(progress, cancellationToken); }); // Merge multiple IAsyncOperations IAsyncOperation compositeOperation = AsyncOperation.Combine(op1, op2, op3); Inter-scene data transfer When creating a game, we will encounter situations where you want to pass values to the next scene. A common case is \"I want to pass the ID of a selected element (stage, character, etc.) to the next scene\". In the ISceneEntryPoint callback, ISceneDataReader is passed to OnInitialize / OnEnter and ISceneDataWriter to OnExit / OnFinalize . These interfaces allow data to be transferred between scenes. For example, by passing a data type implementing the ISceneData interface as an argument to ISceneNavigator.Push , you can transfer that data to OnInitialize and OnEnter of the destination ISceneEntryPoint . On the other hand, the ISceneDataWriter is passed when leaving a scene. This allows the implementation of a process that stores the state of the scene when leaving the scene in the scene history and restores the state of the scene when returning to that scene. For example, when a user transitions to the next scene with \"a specific screen open in the scene\" and returns to the previous scene, the data written to ISceneDataWriter is passed to OnInitialize / OnEnter , so at scene initialization, information on \"which screen was open can be obtained to restore the state of the scene. public sealed class HomeSceneData : ISceneData { public HomeScreenType LastDisplayedScreenType { get; init; } } public sealed class HomeSceneEntryPoint : SceneEntryPoint { [SerializeField] HomeView m_View; protected override UniTask OnInitialize (ISceneDataReader reader, CancellationToken cancellationToken) { // At scene startup, retrieve the saved state and apply it to the elements in the scene. if (reader.TryRead(out HomeSceneData sceneData)) { m_View.SetScreen(sceneData.LastDisplayedScreenType); } } protected override UniTask OnFinalize (ISceneWriter writer, CancellationToken cancellationToken) { // Store data when leaving a scene writer.Write(new HomeSceneData { LastDisplayedScreenType = m_View.ScreenType }); } } It is recommended that ISceneData type definitions be unified as \"one per scene\" to avoid compromising type safety. Single scene launch When debugging with the Unity editor, it is sometimes important for debugging efficiency to be able to \"successfully launch the game from any scene\". In ISceneEntryPoint , there is an editor-specific callback called OnEditorFirstPreInitialize that is called on the \"first scene launched on the editor\". With this callback, the ISceneDataWriter is passed when it is invoked the very first time, so that initial data can be written and passed to subsequent OnInitialize / OnEnter . #if UNITY_EDITOR protected override UniTask OnEditorFirstPreInitialize (ISceneDataWriter writer, CancellationToken cancellationToken) { writer.Write(new IngameSceneData { CharacterId = m_CharacterId }); return UniTask.CompletedTask; } #endif The OnEditorFirstPreInitialize must be enclosed in a UNITY_EDITOR directive. Interrupt scene operation Occasionally, during the processing of a scene transition, you may want to override it with a transition process to another scene. For example, there are cases such as \"I want to transition to an event scene, but when I check OnInitialize , the event period has ended, so I want to call Pop in OnInitialize to return the scene. In this case, the current transition process is interrupted and the scene transition operation is interrupted, but if this is implemented correctly, the internal state management is not easy. Navigathena is implemented to handle such interruptions. The following is a simple example of actual operation. protected override async UniTask OnInitialize (ISceneDataReader reader, IProgress<IProgressDataStore> progress, CancellationToken cancellationToken) { // Assume the event has expired. bool isExpired = true; if (isExpired) { // NOTE: The cancellationToken is not passed to the transition operation because the cancellation state is canceled when the transition operation is performed. await GlobalSceneNavigator.Instance.Pop(CancellationToken.None); // true Debug.Log(cancellationToken.IsCancellationRequested); } } protected override UniTask OnEnter (ISceneDataReader reader, CancellationToken cancellationToken) { Debug.Log(\"EventSceneEntryPoint.OnEnter\"); return UniTask.CompletedTask; } When a new transition process is interrupted, the CancellationTokenSource managed in the SceneNavigator side is canceled, and the CancellationToken passed in each event is also canceled. In the above example, after calling Pop , the cancellationToken will be in the cancel request state, and the subsequent OnEnter will not be called. Scene history editing Occasionally, there are situations where you want to build a history that ignores the current history. Navigathena provides an ISceneHistoryBuilder to directly manipulate the history of the ISceneNavigator by using the IUnsafeSceneNavigator.GetHistoryBuilderUnsafe method. using MackySoft.Navigathena.SceneManagement; using MackySoft.Navigathena.SceneManagement.Unsafe; // Required for IUnsafeSceneNavigator features //... // Remove all except the current scene from the current history, add the Home scene as one previous scene, and reconstruct the history. GlobalSceneNavigator.Instance.GetHistoryBuilderUnsafe() .RemoveAllExceptCurrent() .Add(new SceneHistoryEntry(SceneDefinitions.Home, TransitionDefinitions.Loading, new SceneDataStore()))) .Build(); // Pop to return to the Home scene. await GlobalSceneNavigator.Instance.Pop(); The ISceneHistoryBuilder you have retrieved will be unavailable after the ISceneNavigator transition operation is performed, because it is a different version. So it is necessary to complete the history manipulation process in ISceneHistoryBuilder before the transition operation is performed. This functionality is not included in ISceneNavigator , but is defined in IUnsafeSceneNavigator . If you implement a custom ISceneNavigator and need scene history manipulation functionality, please implement an additional IUnsafeSceneNavigator . ( GlobalSceneNavigator and StandardSceneNavigator explicitly implement IUnsafeSceneNavigator ) As the name implies, IUnsafeScenNavigator is an Unsafe feature and i do not recommend its heavy use. 📚 Integrations Addressables System In Navigathena, the low-level handling of loading and unloading of each scene is handled by the ISceneIdentifier interface. By default, only the BuiltInSceneIdentifier is implemented, but if your project contains the Addressables\" package is included in the project, the AddressalbeSceneIdentifier will be available, allowing seamless incorporation of loading and unloading of scenes handled as Addressables. Below is an example of its use in an actual game I am working on. using MackySoft.Navigathena.SceneManagement; using MackySoft.Navigathena.SceneManagement.AddressableAssets; // Definition of scenes used in the project public static class SceneDefinitions { // Use BuiltInSceneIdentifier for splash public static ISceneIdentifier Splash { get; } = new BuiltInSceneIdentifier(\"Splash\"); // For post-splash scenes, use AddressableSceneIdentifier because Addressables dependencies need to be resolved // Pass `object key` as argument public static ISceneIdentifier Title { get; } = new AddressableSceneIdentifier(\"Title\"); public static ISceneIdentifier Introduction { get; } = new AddressableSceneIdentifier(\"Introduction\"); public static ISceneIdentifier Home { get; } = new AddressableSceneIdentifier(\"Home\"); public static ISceneIdentifier Game { get; } = new AddressableSceneIdentifier(\"Game\"); } Since it is encapsulated in the ISceneIdentifier interface, you do not need to worry about whether the scene you are using is built-in or addressable. The contents of ISceneIdentifier are simple: CreateHandle returns an ISceneHandle , and the returned ISceneHandle is responsible for the actual loading and unloading process. public interface ISceneIdentifier { ISceneHandle CreateHandle (); } public interface ISceneHandle { UniTask<Scene> Load (IProgress<float> progress = null, CancellationToken cancellationToken = default); UniTask Unload (IProgress<float> progress = null, CancellationToken cancellationToken = default); } In the case of AddressableSceneIdentifier , it wraps the LoadSceneAsync / UnloadSceneAsync of Addressables, which of course resolves asset dependencies. However, since downloading assets is beyond the scope of the scene transition framework responsibilities, it is recommended to incorporate pre-download logic at appropriate times depending on the convenience of the project. Dependency injection (DI) The scene management framework can easily become a central hub that influences the very foundation of the architecture in game development, such as \"who will oversee the logic of the scene?\". Navigathena can support dependency injection by incorporating functional integration with a DI container built upon SceneEntryPoint. \"VContainer\" is supported by default. In this integration, instead of inheriting from SceneEntryPoint, you can register a type that implements the ISceneLifecycle interface with the DI container. By placing the pre-defined ScopedSceneEntryPoint by Navigathena in the scene, it is possible to decouple the scene's lifecycle from the component ( MonoBehaviour ). Due to the specification of the timing at which VContainer container determines its parent, it's a bit hacky, but it's necessary to set the LifetimeScope GameObject to inactive. You can easily create this from the Create LifetimeScope button displayed in the ScopedSceneEntryPoint inspector. public override void Configure (IContainerBuilder builder) { builder.Register<ISceneLifecycle, TitleSceneLifecycle>(Lifetime.Singleton); } ❓ FAQ How to load multiple scenes (sub-scenes)? Consider a scenario where, upon loading an in-game scene, you might want to additionally load a sub-scenes that includes a stage or UI. - Ingame - HUD - Stage_01 Occasionally, sub-scenes are managed by a scene management wrapper, but Navigathena does not explicitly support such sub-scene features. The logic for scene transitions inherently needs to be aware of the destination scene. Yet, it is preferable not to know \"what kind of logic will be executed in the destination\". When the logic in the originating scene becomes complex, the responsibility of \"who manages the scene\" becomes ambiguous. This increases the risk of producing code that is difficult to maintain. In Navigathena, it is recommended to clarify this responsibility by \"transferring data such as stage IDs between scenes and managing sub-scenes using the SceneEntryPoint (and SceneLifecycle) in the destination scene with UnityEngine.SceneManagement (or similar functionality)\". By assigning the responsibility of managing sub-scenes to the destination scene, each scene can independently determine which sub-scenes it has and the logic for loading and unloading them. How to have a scene that is always present throughout the life of the application? While there's a personal preference involved, having a scene that always persists throughout the application lifespan (which we call the Root scene) is convenient for development. While one can use DontDestroyOnLoad , its challenging aspect is its lack of flexibility in handling. In projects under development, I have adopted an approach where I am extend ScopedSceneEntryPoint and load the Root scene during the EnsureParentScope phase. public sealed class MyProjectScopedSceneEntryPoint : ScopedSceneEntryPoint { const string kRootSceneName = \"Root\"; protected override async UniTask<LifetimeScope> EnsureParentScope (CancellationToken cancellationToken) { // Load root scene. if (!SceneManager.GetSceneByName(kRootSceneName).isLoaded) { await SceneManager.LoadSceneAsync(kRootSceneName, LoadSceneMode.Additive) .ToUniTask(cancellationToken: cancellationToken); } Scene rootScene = SceneManager.GetSceneByName(kRootSceneName); #if UNITY_EDITOR // Reorder root scene. EditorSceneManager.MoveSceneBefore(rootScene, gameObject.scene); #endif // Build root LifetimeScope container. if (rootScene.TryGetComponentInScene(out LifetimeScope rootLifetimeScope, true) && rootLifetimeScope.Container == null) { await UniTask.RunOnThreadPool(() => rootLifetimeScope.Build(), cancellationToken: cancellationToken); } return rootLifetimeScope; } } ✉ Help & Contribute I welcome feature requests and bug reports in issues and pull requests . If you feel that my works are worthwhile, I would greatly appreciate it if you could sponsor me. Private sponsor and one-time donate are also welcome. GitHub Sponsors: https://github.com/sponsors/mackysoft 📔 Author Info Hiroya Aramaki is a indie game developer in Japan. Twitter: https://twitter.com/makihiro_dev 📜 License This library is under the MIT License ."
  }
}